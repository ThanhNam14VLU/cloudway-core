import { Controller, Post, HttpCode, Res, Headers, Body, Req } from '@nestjs/common';
import { SepayService } from './sepay.service';
import type { Response, Request } from 'express';

@Controller('payment/sepay')
export class SepayController {
  private readonly webhookKey = process.env.SEPAY_WEBHOOK_KEY;

  constructor(private readonly sepayService: SepayService) {}

  @Post('webhook')
  @HttpCode(200)
  async handleWebhook(
    @Headers() headers: Record<string, string>,
    @Req() req: Request,
    @Body() body: any,
    @Res() res: Response
  ) {
    // Debug: Log ngay ƒë·∫ßu ƒë·ªÉ ƒë·∫£m b·∫£o request ƒë·∫øn ƒë∆∞·ª£c endpoint
    console.log('üöÄ ===== WEBHOOK SEPAY RECEIVED =====');
    console.log('üîç Timestamp:', new Date().toISOString());
    console.log('üîç Body:', JSON.stringify(body, null, 2));
    console.log('üîç All headers received:', JSON.stringify(headers, null, 2));
    console.log('üîç Request headers:', JSON.stringify(req.headers, null, 2));
    console.log('üîç Expected API Key:', this.webhookKey);
    console.log('üîç All header keys:', Object.keys(headers));
    console.log('üîç All request header keys:', Object.keys(req.headers));

    // Sepay g·ª≠i API key qua header Authorization v·ªõi format: "Apikey API_KEY"
    // T√¨m header Authorization (case-insensitive) t·ª´ nhi·ªÅu ngu·ªìn
    let authorization: string | undefined;
    
    // Th·ª≠ t√¨m trong headers object
    authorization = headers['authorization'] || 
                    headers['Authorization'] ||
                    headers['AUTHORIZATION'];
    
    // Th·ª≠ t√¨m trong raw request headers (Express)
    if (!authorization && req.headers) {
      authorization = req.headers['authorization'] as string || 
                      req.headers['Authorization'] as string ||
                      req.headers['AUTHORIZATION'] as string;
    }

    // Th·ª≠ t√¨m v·ªõi ngrok headers (ngrok c√≥ th·ªÉ th√™m prefix)
    if (!authorization) {
      const ngrokHeaders = Object.keys(req.headers).filter(key => 
        key.toLowerCase().includes('authorization')
      );
      if (ngrokHeaders.length > 0) {
        console.log('üîç Found ngrok authorization headers:', ngrokHeaders);
        authorization = req.headers[ngrokHeaders[0]] as string;
      }
    }

    console.log('üîç Authorization header found:', authorization ? `"${authorization}"` : 'NOT FOUND');

    // TEMPORARY: Cho ph√©p kh√¥ng c√≥ Authorization ƒë·ªÉ test
    // TODO: Remove sau khi confirm Sepay g·ª≠i Authorization nh∆∞ th·∫ø n√†o
    // N·∫øu c√≥ authorization header th√¨ validate
    if (authorization) {
      // Trim v√† parse API key t·ª´ format "Apikey API_KEY" (case-insensitive)
      const trimmedAuth = authorization.trim();
      const authParts = trimmedAuth.split(/\s+/); // Split by any whitespace

      console.log('üîç Auth parts after split:', authParts);
      // Ki·ªÉm tra format: ph·∫£i c√≥ 2 parts v√† ph·∫ßn ƒë·∫ßu ph·∫£i l√† "Apikey" (case-insensitive)
      if (authParts.length !== 2 || authParts[0].toLowerCase() !== 'apikey') {
        console.warn('‚ùå Webhook Sepay: Format Authorization kh√¥ng h·ª£p l·ªá!');
        console.warn(`Received: "${authorization}"`);
        console.warn(`Auth parts:`, authParts);
        console.warn(`First part (lowercase): "${authParts[0]?.toLowerCase()}"`);
        return res.status(401).send('Unauthorized');
      }

      const apiKey = authParts[1].trim();
      console.log('üîç Extracted API Key:', apiKey);
      console.log('üîç Expected API Key:', this.webhookKey);
      console.log('üîç API Keys match:', apiKey === this.webhookKey);

      if (apiKey !== this.webhookKey) {
        console.warn('‚ùå Webhook Sepay: API Key kh√¥ng h·ª£p l·ªá!');
        console.warn(`Expected: "${this.webhookKey}"`);
        console.warn(`Received: "${apiKey}"`);
        return res.status(401).send('Unauthorized');
      }
    } else {
      console.warn('‚ö†Ô∏è Webhook Sepay: Thi·∫øu header Authorization!');
      console.warn('‚ö†Ô∏è TEMPORARY: Cho ph√©p request ƒëi qua ƒë·ªÉ test...');
      // TODO: Uncomment d√≤ng d∆∞·ªõi sau khi setup ƒë√∫ng Authorization
      // return res.status(401).send('Unauthorized');
    }

    // G·ªçi service ƒë·ªÉ x·ª≠ l√Ω thanh to√°n (v√≠ d·ª•: c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng)
    await this.sepayService.handlePaymentUpdate(body);

    return res.status(200).send('OK');
  }
}
