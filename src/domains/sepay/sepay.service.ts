import { Injectable, Logger } from '@nestjs/common';
import { SupabaseService } from '../../services/supabase/supabase.service';

@Injectable()
export class SepayService {
  private readonly logger = new Logger(SepayService.name);
  constructor(private readonly supabaseService: SupabaseService) {}

  async handlePaymentUpdate(data: any) {
    try {
      this.logger.log(`üîî Nh·∫≠n webhook t·ª´ Sepay: ${JSON.stringify(data)}`);

      // 1Ô∏è‚É£ X√°c ƒë·ªãnh c√°c tr∆∞·ªùng quan tr·ªçng trong webhook
      const {
        id,
        content,
        transferType,
        transferAmount,
        referenceCode,
        transactionDate,
      } = data;

      // 2Ô∏è‚É£ Ch·ªâ x·ª≠ l√Ω khi transferType = "in" (ti·ªÅn v√†o = thanh to√°n th√†nh c√¥ng)
      if (transferType !== 'in') {
        this.logger.warn(`‚ö†Ô∏è B·ªè qua giao d·ªãch type: ${transferType} (ch·ªâ x·ª≠ l√Ω "in")`);
        return;
      }

      // 3Ô∏è‚É£ Extract PNR code t·ª´ content
      // Format: "Thanh toan booking PNR[pnr_code]" ‚Üí extract "[pnr_code]"
      // V√≠ d·ª•: "Thanh toan booking PNR2T38YZ" ‚Üí code: "2T38YZ"
      let bookingCode: string | null = null;
      
      if (content) {
        // T√¨m pattern: PNR + code (3-20 k√Ω t·ª± ch·ªØ v√† s·ªë)
        const match = content.match(/\bPNR([A-Z0-9]{3,20})\b/i);
        if (match && match[1]) {
          bookingCode = match[1].trim().toUpperCase();
          this.logger.log(`‚úÖ T√¨m th·∫•y PNR code: ${bookingCode}`);
        }
      }

      if (!bookingCode) {
        this.logger.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y PNR code trong content: "${content}"`);
        this.logger.warn(`‚ö†Ô∏è Format mong ƒë·ª£i: "Thanh toan booking PNR[pnr_code]"`);
        return;
      }

      // 4Ô∏è‚É£ T√¨m booking theo PNR code
      const { data: booking, error: bookingError } = await this.supabaseService.client
        .from('bookings')
        .select('id, pnr_code, status')
        .eq('pnr_code', bookingCode)
        .maybeSingle();

      if (bookingError) {
        this.logger.error(`‚ùå L·ªói khi t√¨m booking: ${bookingError.message}`);
        return;
      }

      if (!booking) {
        this.logger.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y booking v·ªõi PNR code: ${bookingCode}`);
        return;
      }

      this.logger.log(`‚úÖ T√¨m th·∫•y booking: ${booking.id} (PNR: ${booking.pnr_code})`);

      // 5Ô∏è‚É£ T√¨m payment c·ªßa booking n√†y
      const { data: payment, error: paymentError } = await this.supabaseService.client
        .from('payments')
        .select('id, booking_id, amount, status')
        .eq('booking_id', booking.id)
        .order('created_at', { ascending: false })
        .maybeSingle();

      if (paymentError) {
        this.logger.error(`‚ùå L·ªói khi t√¨m payment: ${paymentError.message}`);
        return;
      }

      if (!payment) {
        this.logger.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y payment cho booking: ${booking.id}`);
        return;
      }

      // 6Ô∏è‚É£ Ki·ªÉm tra s·ªë ti·ªÅn c√≥ kh·ªõp kh√¥ng (optional, c√≥ th·ªÉ b·ªè qua)
      if (Math.abs(payment.amount - transferAmount) > 1000) {
        this.logger.warn(
          `‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng kh·ªõp: Payment=${payment.amount}, Transfer=${transferAmount}`
        );
        // V·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω, ch·ªâ c·∫£nh b√°o
      }

      // 7Ô∏è‚É£ Ch·ªâ update n·∫øu payment ƒëang ·ªü tr·∫°ng th√°i PENDING
      if (payment.status !== 'PENDING') {
        this.logger.log(
          `‚ÑπÔ∏è Payment ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥. Status hi·ªán t·∫°i: ${payment.status}`
        );
        return;
      }

      // 8Ô∏è‚É£ C·∫≠p nh·∫≠t payment status th√†nh PAID
      const { error: updateError } = await this.supabaseService.client
        .from('payments')
        .update({
          status: 'PAID',
          transaction_id: referenceCode || id?.toString(),
          paid_at: transactionDate ? new Date(transactionDate).toISOString() : new Date().toISOString(),
        })
        .eq('id', payment.id);

      if (updateError) {
        this.logger.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t payment: ${updateError.message}`);
        return;
      }

      // 9Ô∏è‚É£ C·∫≠p nh·∫≠t booking status th√†nh CONFIRMED
      await this.supabaseService.client
        .from('bookings')
        .update({ status: 'CONFIRMED', updated_at: new Date().toISOString() })
        .eq('id', booking.id);

      this.logger.log(
        `‚úÖ ƒê√£ c·∫≠p nh·∫≠t thanh to√°n [${bookingCode}] ‚Üí PAID (Payment ID: ${payment.id})`
      );
    } catch (err) {
      this.logger.error('üî• L·ªói x·ª≠ l√Ω webhook Sepay:', err);
    }
  }
}
